#version 450
#extension GL_ARB_separate_shader_objects  : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive     : require
#extension GL_AMD_shader_trinary_minmax    : enable

#include "_header.inc"
#include "_maths.inc"
#include "_noise.inc"

#define GROUP_SIZE_X 8
#define GROUP_SIZE_Y 8
layout(local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;

layout(set=0, binding=0, std430) restrict readonly buffer I0 {
    float dataIn[];
};
layout(set=0, binding=1, rgba8) uniform writeonly image2D imageOut;

layout(set=0, binding=2, std140) uniform readonly UBO {
    mat4 view;      // world to camera
    mat4 invView;   // camera to world

    vec3 cameraPos;
    float tanFov2;  // tan(radians(fov)/2)

    vec3 cameraDir;
    float _pad1;

    vec3 cameraUp;
    float _pad2;
} ubo;

layout(set=0, binding = 3) uniform sampler2D sampler0;

// Push constants (max 128 bytes)
layout(std140, push_constant) uniform PC {
    float time;
} pc;

ivec2 IMAGE_SIZE = imageSize(imageOut);
vec2 SCREEN_SIZE = IMAGE_SIZE;
uvec2 imagePos   = gl_GlobalInvocationID.xy;
vec3 sunPos      = vec3(500.0, 2000.0, 1000.0);

#define MAX_DISTANCE (10000)
#define FOCAL_LENGTH (1500)
#define ASPECT_RATIO vec2(SCREEN_SIZE / SCREEN_SIZE.y)

State state;

#include "_camera.inc"
#include "_sdf_funcs.inc"
#include "_state.inc"
#include "_scene1.inc"
#include "_march.inc"

void main() {
    Ray ray = getRay(imagePos);
    float t;
    vec4 pixel = vec4(0,0,0,1);

    if(march(ray, t)) {
        vec3 hit     = ray.origin + ray.dir*t;
        vec3 normal  = calcNormal(hit);
        vec3 toLight = normalize(sunPos-hit);
        //vec3 refl    = normalize(reflect(ray.dir, normal));

        vec3 ambient = vec3(0.05, 0.05, 0.05);
        vec3 spec    = vec3(0);
        vec3 diff    = vec3(0);

        float light = 0;
        float NdotL = dot(normal, toLight);
        if(NdotL >= 0) {
            /// facing the light

            vec3 diffuse = state.material.colour;

            if(state.material.texture>-1) {
                vec2 uv = (normal.x*state.p.yz +
                normal.y*state.p.xz +
                normal.z*state.p.xy) / 30;
                diffuse = (diffuse+texture(sampler0, uv).rgb)/2;
            }


            light = softShadow(hit, normalize(sunPos-hit), MAX_DISTANCE, 4);
            //light = hardShadow(hit, normalize(sunPos-hit), MAX_DISTANCE);

            //float occ   = ao(hit, normal, 1);
            float occ   = aoCheap(hit, normal, 0.4);

            light = saturate((occ+light)/2);

            diff = diffuseColour(
                diffuse,
                normal,
                toLight
            );
            spec = state.material.specPower == 0 ? vec3(0,0,0) :
            specularColour(
                vec3(1,1,1),
                normal,
                ray.dir,
                toLight,
                state.material.specPower
            );
        }

        pixel = vec4(ambient + (diff + spec) * light, 1);
    }

    imageStore(imageOut, ivec2(imagePos), pixel);
}